#!/bin/bash
#=========================================================================
# Description: Install armbian to EMMC
# Copyright (C) 2021 https://github.com/unifreq/openwrt_packit
# Copyright (C) 2021 https://github.com/ophub/amlogic-s9xxx-armbian
#=========================================================================

cat <<EOF
**************************************************************************
Please select Amlogic s9xxx box, Determine the skipped space (unit: MB):

1.  X96-Max+ (4G DDR) -------- [ S905x3 / CPU: 2124Mtz / NETWORK: 1000M ]
2.  HK1-Box (4G DDR) --------- [ S905x3 / CPU: 2124Mtz / NETWORK: 1000M ]
3.  H96-Max-X3 (4G DDR) ------ [ S905x3 / CPU: 2124Mtz / NETWORK: 1000M ]
4.  Ugoos-X3 (Cube/Pro/Plus) - [ S905x3 / CPU: 2124Mtz / NETWORK: 1000M ]
5.  X96-Max-4G --------------- [ S905x2 / CPU: 1944Mtz / NETWORK: 1000M ]
6.  X96-Max-2G --------------- [ S905x2 / CPU: 1944Mtz / NETWORK: 100M  ]
7.  Belink-GT-King ----------- [ S922x  / CPU: 2124Mtz / NETWORK: 1000M ]
8.  Belink-GT-King-Pro ------- [ S922x  / CPU: 2124Mtz / NETWORK: 1000M ]
9.  UGOOS-AM6-Plus ----------- [ S922x  / CPU: 2124Mtz / NETWORK: 1000M ]
10. Octopus-Planet ----------- [ S912   / CPU: 2124Mtz / NETWORK: 1000M ]
11. Phicomm-n1 --------------- [ S905d  / CPU: 2124Mtz / NETWORK: 1000M ]
12. hg680p & b860h ----------- [ S905x  / CPU: 2124Mtz / NETWORK: 1000M ]
13. X96-Mini & TX3-Mini ------ [ S905w  / CPU: 1944Mtz / NETWORK: 100M  ]

0. Other --------------------- [ Customize the skipped space (unit: MB) ]
**************************************************************************
EOF

SKIP=700
BOOT=256

read select
case "${select}" in
    1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9)
        SKIP=1350
        ;;
    10 | 11 | 12 | 13)
        SKIP=700
        ;;
    0)
        echo -ne "Please enter the size (MB) to be skipped, it can only be (68-2048) :"
        read skip
            if [ -z "${skip}" ];then
                echo "Input error."
                exit 1
            fi
            if (( ${skip} >= 68  && ${skip} <= 2048 ));then
                SKIP=${skip}
            else
                echo "Input error: ${skip}"
                exit 1
            fi
        ;;
    *)
        echo "Invalid input."
        exit 1
        ;;
esac

echo "SKIP = ${SKIP} MB"
systemctl stop armbian-resize-filesystem.service
systemctl disable armbian-resize-filesystem.service

echo "Start script create MBR and filesystem"

hasdrives=$(lsblk | grep -oE '(mmcblk[0-9])' | sort | uniq)
if [ "${hasdrives}" = "" ]; then
    echo "UNABLE TO FIND ANY EMMC OR SD DRIVES ON THIS SYSTEM!!! "
    exit 1
fi

avail=$(lsblk | grep -oE '(mmcblk[0-9]|sda[0-9])' | sort | uniq)
if [ "${avail}" = "" ]; then
    echo "UNABLE TO FIND ANY DRIVES ON THIS SYSTEM!!!"
    exit 1
fi

runfrom=$(lsblk | grep /$ | grep -oE '(mmcblk[0-9]|sda[0-9])')
if [ "${runfrom}" = "" ]; then
    echo " UNABLE TO FIND ROOT OF THE RUNNING SYSTEM!!! "
    exit 1
fi

emmc=$(echo ${avail} | sed "s/${runfrom}//" | sed "s/sd[a-z][0-9]//g" | sed "s/ //g")
if [ "${emmc}" = "" ]; then
    echo " UNABLE TO FIND YOUR EMMC DRIVE OR YOU ALREADY RUN FROM EMMC!!!"
    exit 1
fi

if [ "${runfrom}" = "${avail}" ]; then
    echo " YOU ARE RUNNING ALREADY FROM EMMC!!! "
    exit 1
fi

if [ "${runfrom}" = "${emmc}" ]; then
    echo " YOU ARE RUNNING ALREADY FROM EMMC!!! "
    exit 1
fi

if [ "$(echo ${emmc} | grep mmcblk)" = "" ]; then
    echo " YOU DO NOT APPEAR TO HAVE AN EMMC DRIVE!!! "
    exit 1
fi

DEV_EMMC="/dev/${emmc}"
echo ${DEV_EMMC}

# 判断内核版本是否 >= 5.10
KERNEL_VERSION=$(uname -r)
K_VER=$(echo "${KERNEL_VERSION}" | cut -d '.' -f1)
K_MAJ=$(echo "${KERNEL_VERSION}" | cut -d '.' -f2)

if [ "${K_VER}" -eq "5" ];then
    if [ "${K_MAJ}" -ge "10" ];then
        K510=1
    else
        K510=0
    fi
elif [ "${K_VER}" -gt "5" ];then
    K510=1
else
    K510=0
fi

echo "Start backup u-boot default"
dd if="${DEV_EMMC}" of=/root/u-boot-default-aml.img bs=1M count=4 conv=fsync
exists_pts=$(parted ${DEV_EMMC} print | grep 'primary'| wc -l)
if [ "${exists_pts}" -gt "0" ];then
    i=1
    while [ "${i}" -le "${exists_pts}" ]; do
        parted -s ${DEV_EMMC} rm $i 2>/dev/null
        let i++
    done
fi
dd if=/dev/zero of=${DEV_EMMC} bs=512 count=1 conv=fsync

echo "Start create MBR and partittion"
parted -s "${DEV_EMMC}" mklabel msdos 2>/dev/null
parted -s "${DEV_EMMC}" mkpart primary fat32 $((SKIP*1024*1024))b $(( (SKIP+BOOT)*1024*1024 - 1 ))b 2>/dev/null
parted -s "${DEV_EMMC}" mkpart primary ext4 $(( (SKIP+BOOT)*1024*1024 ))b 100% 2>/dev/null

echo "Start restore u-boot"
dd if=/root/u-boot-default-aml.img of="${DEV_EMMC}" conv=fsync bs=1 count=442 
dd if=/root/u-boot-default-aml.img of="${DEV_EMMC}" conv=fsync bs=512 skip=1 seek=1
sync

echo "Start copy system for eMMC."

mkdir -p /ddbr
chmod 777 /ddbr

PART_BOOT="${DEV_EMMC}p1"
PART_ROOT="${DEV_EMMC}p2"
DIR_INSTALL="/ddbr/install"

if [ -d ${DIR_INSTALL} ]; then
    rm -rf ${DIR_INSTALL}
fi
mkdir -p ${DIR_INSTALL}

if grep -q ${PART_BOOT} /proc/mounts ; then
    echo "Unmounting BOOT partiton."
    umount -f ${PART_BOOT}
fi
echo "Formatting BOOT partition..."
mkfs.vfat -n "BOOT_EMMC" ${PART_BOOT}

mount -o rw ${PART_BOOT} ${DIR_INSTALL}

echo "Copying BOOT..."
cp -rf /boot/* ${DIR_INSTALL} && sync
rm -rf ${DIR_INSTALL}/'System Volume Information' 2>/dev/null

echo "Edit init config..."
lines=$(wc -l < ${DIR_INSTALL}/uEnv.txt)
let lines=lines-1
head -n $lines ${DIR_INSTALL}/uEnv.txt > ${DIR_INSTALL}/uEnv-emmc.txt

cat >> ${DIR_INSTALL}/uEnv-emmc.txt <<EOF
APPEND=root=LABEL=ROOTFS_EMMC rootflags=data=writeback rw console=ttyAML0,115200n8 console=tty0 no_console_suspend consoleblank=0 fsck.fix=yes fsck.repair=yes net.ifnames=0 cgroup_enable=cpuset cgroup_memory=1 cgroup_enable=memory swapaccount=1
EOF

mv -f ${DIR_INSTALL}/uEnv-emmc.txt ${DIR_INSTALL}/uEnv.txt
touch ${DIR_INSTALL}/uEnv.txt
cp -f ${DIR_INSTALL}/uEnv.txt /root/uEnv.emmc
if [ "${K510}" -eq "1" ];then
    cp -f ${DIR_INSTALL}/uEnv.txt /boot/uEnv.emmc
fi
cp -f /boot/uEnv.txt  /root/uEnv.sd
rm ${DIR_INSTALL}/s9*
rm ${DIR_INSTALL}/aml*
mv -f ${DIR_INSTALL}/boot-emmc.ini ${DIR_INSTALL}/boot.ini
sed -e "s/u-boot.ext/u-boot.emmc/g" -i "${DIR_INSTALL}/boot.ini"
mv -f ${DIR_INSTALL}/boot-emmc.scr ${DIR_INSTALL}/boot.scr
mv -f ${DIR_INSTALL}/boot-emmc.cmd ${DIR_INSTALL}/boot.cmd
if [ -f /boot/u-boot.ext ] ; then
    if [ "${K510}" -eq "1" ];then
        cp -f ${DIR_INSTALL}/u-boot.ext ${DIR_INSTALL}/u-boot.emmc
    else
        mv -f ${DIR_INSTALL}/u-boot.sd ${DIR_INSTALL}/u-boot.emmc
    fi
fi
sync

umount ${DIR_INSTALL}

if grep -q ${PART_ROOT} /proc/mounts ; then
    echo "Unmounting ROOT partiton."
    umount -f ${PART_ROOT}
fi

echo "Formatting ROOT partition..."
mkfs.ext4 -F -L ROOTFS_EMMC ${PART_ROOT}

echo "Copying ROOTFS."
mount -t ext4 ${PART_ROOT} ${DIR_INSTALL}

cd /
mkdir -p ${DIR_INSTALL}/{boot/,dev/,media/,mnt/,proc/,run/,sys/,tmp/} && sync
COPY_SRC="bin etc home lib lib64 opt root sbin selinux srv usr var"
for src in ${COPY_SRC}; do
    echo "copy [ ${src} ] ..."
    tar -cf - ${src} | (cd ${DIR_INSTALL}; tar -xf -)
    sync
done
echo "Copy complete."

echo "Copy fstab"
rm ${DIR_INSTALL}/etc/fstab
cat > ${DIR_INSTALL}/etc/fstab<<EOF
/dev/root       /               ext4            defaults,noatime,errors=remount-ro     	0 1
EOF

cat >> ${DIR_INSTALL}/etc/fstab <<EOF
LABEL=BOOT_EMMC /boot           vfat            defaults                                0 0
tmpfs           /tmp            tmpfs           defaults,nosuid                         0 0
EOF

rm -f ${DIR_INSTALL}/root/fstab
cd /
sync
umount ${DIR_INSTALL}

echo "*************************************************************************************************"
echo "Successful installed, please unplug the USB, re-insert the power supply to start the armbian."
echo "*************************************************************************************************"

